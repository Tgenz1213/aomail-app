from colorama import Fore, init
import time
import statistics
import gpt_3_5_turbo, claude, mistral


######################## CONSTANTS ########################
# TODO: add gpt_4
# TODO: add role as a parameter in get_prompt_response for testing by role
# TODO: generate a pdf file

# TODO: add a counter per ia in the try except to check the success rate
# TODO: store errors for debugging
LIST_AI_PROVIDERS = [gpt_3_5_turbo, claude, mistral]
LIST_FUNCTIONS = ["new_mail_recommendation", "correct_mail_language_mistakes"]

# Cr√©er une liste combin√©e des fournisseurs AI et des fonctions
COMBINED_LIST = [
    (provider, function)
    for provider in LIST_AI_PROVIDERS
    for function in LIST_FUNCTIONS
]

# Initialiser le dictionnaire pour stocker les statistiques
ai_providers_stats = {
    provider.__name__: {function: [] for _, function in COMBINED_LIST}
    for provider, _ in COMBINED_LIST
}

# ----------------------- new_mail_recommendation EXAMPLES -----------------------#
examples_new_mail_recommendation = [
    (
        "<p>Hello, can I ask a question about Graph API implementation inside an app here?</p>",
        "",
        "Mail formel et long",
    ),
    (
        "<p>bjr Msr DUPONT, je vous souahite une bonne ann√©e. Je c que l'algebre ct dure et je nai ps compris grand chse mais g f√© de mon miux. Bonne continuatioN. G plein de projet et rencontr√© d personne fantastiques. Ctt ann√©e va etre incroyable, je sui mega focus et j'apprend bcp de ttrucs en info. Augustin <i>Software engineer student</i></p>",
        "Maths - bilan des 2 derni√®res ans",
        "Mail tr√®s formel, froid et clair et concis",
    ),
    (
        "<p>Salut <strong>papi</strong> cv ? nous on s√©clate en Espagne!!! on ador la piscine. Claude et la fam</p>",
        "NEws des vacs",
        "Mail informel, court et enjou√©",
    ),
    (
        "<p>slt cv jsp koi dir. si tu voi ca c que test a march ‚úåÔ∏èüòä</p>",
        "msg de test ala tem",
        "Mail totalement informel et ultra court",
    ),
    (
        "<p>je crois que g trouv√© quelquechose de pas mal en <strong>prompt engineering</strong>. jesp que cv de votr cote. un peu de taf en back en front et on pourra push en prod</p>",
        "proje - on av bien et vite",
        "Mail court, pro et efficace",
    ),
    (
        "<p>Je vais sans doute vous rejoindre l'ann√©e prochaine car je ne suis qu'en ING2 pour l'instant. Et ce semestre est vraiment compliqu√©, il me reste une seule semaine et apr√®s je reviens vers Th√©o sur Mail Assistant et je me r√©attaque au pb de licence M365</p>",
        "Salut Jean, √ßa se passe bien ton alternance?",
        "Mail formel et professionnel",
    ),
    (
        "<p>bsr madama. Je suis en 2eme ann√©e de cyle pr√©pa. Est ce ke je peux av la lsit des entreprises ds lesquell les eleves en IR3, 4, 5 on fait soit 1 stage soi une alternance. Merc de votre retour. Augustin ROLET</p>",
        "Stages & Alter",
        "Email de haute qualit√©, irr√©prochable et d'un niveau de langue pr√©sidentiel",
    ),
]

# ----------------------- new_correct_mail_language_mistakes EXAMPLES -----------------------#
examples_correct_mail_language_mistakes = [
    ("Salut, cmt √ßa va?", "Juste pr prendre de tes nouvelles, cmt √ßa va?"),
    ("Lol, tu l√†?", "Hey, lol, tu l√†?"),
    ("A tooute √† l'h", "A laproch  on se voit plus tard!"),
    ("peti test appl", "c un  emai de test envoyer depus l'appl"),
    ("Hey! Quoi de neuf?", "Hey! Quoi de neuf? Pas de news de to√Æ depuis un moment."),
    ("Attend ta r√©ponse", "Toujours en atente de ta r√©ponse o dernier mail."),
    ("Merci", "Merci pr l'info, c'est simp√†!"),
    ("Coucou", "Coucou, t'as une minute? Besoin dton avis sur kke chose."),
    (
        "Discus proj entrprena",
        "Bonjour, j'esp√®re que tu va bi1. Je voula discuter avec toi du proj",
    ),
]





# Dictionnaire pour stocker les r√©sultats
results = {}

# Parcourir les exemples
for example in (
    examples_new_mail_recommendation + examples_correct_mail_language_mistakes
):
    # D√©terminer le nombre d'√©l√©ments par tuple
    num_elements = len(example)

    # Assigner les √©l√©ments du tuple
    if num_elements == 3:
        mail_content, email_subject, user_recommendation = example
    elif num_elements == 2:
        mail_content, email_subject = example
    else:
        continue

    # Parcourir les fournisseurs AI
    for ai_provider in LIST_AI_PROVIDERS:
        # Parcourir les fonctions AI
        for function in LIST_FUNCTIONS:
            start_time = time.time()
            try:
                # Appeler la fonction AI correspondante
                if num_elements == 3:
                    result = getattr(ai_provider, function)(
                        mail_content, email_subject, user_recommendation
                    )
                elif num_elements == 2:
                    result = getattr(ai_provider, function)(mail_content, email_subject)

            except:
                pass
            elapsed_time = time.time() - start_time

            # Stocker les r√©sultats
            results[(mail_content, email_subject, ai_provider.__name__, function)] = {
                "result": result,
                "elapsed_time": elapsed_time,
                "ai_provider": ai_provider.__name__,
                "function_name": function,
                "example": example,
            }
            ai_providers_stats[ai_provider.__name__][function].append(elapsed_time)

            # Afficher les r√©sultats
            print(f"AI Provider: {ai_provider.__name__}, Function: {function}")
            print(f"{Fore.LIGHTBLUE_EX}{result}")
            print(f"Elapsed Time: {elapsed_time} seconds\n")

# Extraire les temps √©coul√©s pour tous les prompts
all_elapsed_times = [result["elapsed_time"] for result in results.values()]

# Afficher les statistiques g√©n√©rales
min_time = round(min(all_elapsed_times), 2)
max_time = round(max(all_elapsed_times), 2)
print(f"Min Time: {min_time} seconds")
print(f"Max Time: {max_time} seconds")

avg_time_all_prompts = round(statistics.mean(all_elapsed_times), 2)
print(f"Avg Time for All Prompts: {avg_time_all_prompts} seconds")

std_dev_all_prompts = round(statistics.stdev(all_elapsed_times), 2)
print(f"Standard Deviation for All Prompts: {std_dev_all_prompts} seconds")

# Afficher les statistiques pour chaque fournisseur AI et fonction
for provider, functions in ai_providers_stats.items():
    print(f"\nAI Provider: {provider}")
    for function, elapsed_times in functions.items():
        min_time_function = round(min(elapsed_times), 2)
        max_time_function = round(max(elapsed_times), 2)
        avg_time_function = round(statistics.mean(elapsed_times), 2)
        std_dev_function = round(statistics.stdev(elapsed_times), 2)

        print(f"\tFunction: {function}")
        print(f"\tMin Time: {min_time_function} seconds")
        print(f"\tMax Time: {max_time_function} seconds")
        print(f"\tAvg Time: {avg_time_function} seconds")
        print(f"\tStandard Deviation: {std_dev_function} seconds")
