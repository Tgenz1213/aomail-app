from langchain.chains import ConversationChain
from langchain.memory import ConversationBufferMemory, ChatMessageHistory
from langchain_core.prompts.prompt import PromptTemplate
from langchain_community.chat_models import ChatAnthropic
from constants import CLAUDE_CREDS


from langchain.memory import (
    ChatMessageHistory,
    ConversationSummaryMemory,
    ConversationBufferMemory,
)
from langchain.chains import ConversationChain
from langchain_core.prompts.prompt import PromptTemplate
import json
import anthropic
from colorama import Fore, init
from constants import CLAUDE_CREDS, HUMAN, ASSISTANT
from langchain_anthropic import ChatAnthropic

######################## Claude 3 API SETTINGS ########################
init(autoreset=True)


######################## TEXT PROCESSING UTILITIES ########################
def get_prompt_response(formatted_prompt):
    """Returns the prompt response"""
    client = anthropic.Anthropic(api_key=CLAUDE_CREDS["api_key"])
    response = client.messages.create(
        model="claude-3-haiku-20240307",
        max_tokens=1000,
        temperature=0.0,
        messages=[{"role": "user", "content": formatted_prompt}],
    )
    return response


class GenerateEmailConversation:
    """Handles the conversation with the AI to generate an email."""

    def __init__(
        self, user: str, length: str, formality: str, subject: str, body: str
    ) -> None:
        self.user = user
        self.subject = subject
        self.body = body
        self.length = length
        self.formality = formality
        self.history = ChatMessageHistory()
        self.history.add_ai_message("Does this email satisfy you?")

    def improve_draft(self, user_input: str):
        """Prompt template to improve the first draft generated by Ao."""

        template = f"""{HUMAN}You are Ao, an email assistant, who helps a user redact an email.
        The user has already entered the recipients and the subject: '{self.subject}' of the email.    
        Improve the email body and subject following the user's guidelines.

        Current email body:
        {self.body}

        Current Conversation:
        {self.history}
        User: {user_input}

        The response must retain the core information and incorporate the required user changes.
        If you hesitate or there is contradictory information, always prioritize the last user input.
        Keep the same email body length: '{self.length}' AND level of speech: '{self.formality}' unless a change is explicitly mentioned by the user.

        ---
        Answer must ONLY be in JSON format with two keys: subject (STRING) and body in HTML format without spaces and unusual line breaks.
        {ASSISTANT}
        """
        response = get_prompt_response(template)
        clear_text = response.content[0].text.strip()

        print(clear_text)

        result_json:dict = json.loads(clear_text)

        subject_text = result_json.get("subject")
        email_body = result_json.get("body")

        print(f"{Fore.CYAN}{length} and {formality} email suggestion:")
        print(f"{Fore.GREEN}Subject: {subject_text}")
        print(f"{Fore.CYAN}Email Body: {email_body}")

        return subject_text, email_body

# N'hésitez pas à fournir un brouillon de l'email que vous souhaitez rédiger
# => we get subject_text, email_body (use basic claude prompt eng ✅)


# pose une question à m.crochet en lui demandant c quoi le gpa et commen conv avec notre sys europe de credits ects
# + a quoi corrspondrai 14/20 de moyenne enterme de range gpa

length = "brief"
formality = "formal"
subject = "Question sur le GPA"
body = "<p>Bonjour,</p><p>J'espère que cette email vous trouve bien. J'ai une question concernant le GPA (Grade Point Average). Est-ce que le système de GPA existe également en France ? Si oui, quel est l'équivalent français ?</p>\n\n<p>De plus, est-ce qu'un score de 14 correspondrait à un rang B dans le système français ?</p><p>Je vous remercie d'avance pour votre réponse.</p><p>Cordialement,</p>"

# if and only if the user is not satisfied
# new prompt disant que non il faut faire ci
user_input = "Non, cela ne me plaît pa. stp enlève la formul de politess email vs trouve bien et rajoute M.CROCHet + ma signature Augustin ROLET"


gen_email_conv = GenerateEmailConversation("augustin", length, formality, subject, body)
gen_email_conv


# Corrige l'orthographe => J'ai corrigé l'orthographe, est-ce que souhaitez autre chose ?
# Vérifie le copywriting => J'ai vérifié le copywriting, est-ce que souhaitez autre chose ?
# Améliore l'écriture => Est-ce que ce mail vous convient mieux ?


# il répond tjrs ça après
# Est-ce que ce mail vous convient mieux ?
